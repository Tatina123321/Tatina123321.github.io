(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var calculator = {
  displayValue: '0',
  firstOperand: null,
  waitingForSecondOperand: false,
  operator: null
};

function inputDigit(digit) {
  var displayValue = calculator.displayValue,
      waitingForSecondOperand = calculator.waitingForSecondOperand;

  if (waitingForSecondOperand === true) {
    calculator.displayValue = digit;
    calculator.waitingForSecondOperand = false;
  } else {
    calculator.displayValue = displayValue === '0' ? digit : displayValue + digit;
  }
}

function inputDecimal(dot) {
  if (!calculator.displayValue.includes(dot)) {
    calculator.displayValue += dot;
  }
}

function handleOperator(nextOperator) {
  var firstOperand = calculator.firstOperand,
      displayValue = calculator.displayValue,
      operator = calculator.operator;
  var inputValue = parseFloat(displayValue);

  if (operator && calculator.waitingForSecondOperand) {
    calculator.operator = nextOperator;
    return;
  }

  if (firstOperand == null) {
    calculator.firstOperand = inputValue;
  } else if (operator) {
    var currentValue = firstOperand || 0;
    var result = performCalculation[operator](currentValue, inputValue);
    calculator.displayValue = String(result);
    calculator.firstOperand = result;
  }

  calculator.waitingForSecondOperand = true;
  calculator.operator = nextOperator;
}

var performCalculation = {
  '/': function _(firstOperand, secondOperand) {
    return firstOperand / secondOperand;
  },
  '*': function _(firstOperand, secondOperand) {
    return firstOperand * secondOperand;
  },
  '+': function _(firstOperand, secondOperand) {
    return firstOperand + secondOperand;
  },
  '-': function _(firstOperand, secondOperand) {
    return firstOperand - secondOperand;
  },
  '=': function _(firstOperand, secondOperand) {
    return secondOperand;
  }
};

function resetCalculator() {
  calculator.displayValue = '0';
  calculator.firstOperand = null;
  calculator.waitingForSecondOperand = false;
  calculator.operator = null;
}

function updateDisplay() {
  var display = document.querySelector('.calculator-screen');
  display.value = calculator.displayValue;
}

updateDisplay();
var keys = document.querySelector('.calculator-keys');
keys.addEventListener('click', function (event) {
  var target = event.target;

  if (!target.matches('button')) {
    return;
  }

  if (target.classList.contains('operator')) {
    handleOperator(target.value);
    updateDisplay();
    return;
  }

  if (target.classList.contains('decimal')) {
    inputDecimal(target.value);
    updateDisplay();
    return;
  }

  if (target.classList.contains('all-clear')) {
    resetCalculator();
    updateDisplay();
    return;
  }

  inputDigit(target.value);
  updateDisplay();
});

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
